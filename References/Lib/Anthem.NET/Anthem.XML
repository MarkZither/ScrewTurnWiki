<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Anthem</name>
    </assembly>
    <members>
        <member name="T:Anthem.IUpdatableControl">
            <summary>
            Controls that implement this interface can have their HTML
            updated on the client page after a call back returns.
            </summary>
        </member>
        <member name="P:Anthem.IUpdatableControl.UpdateAfterCallBack">
            <summary>
                Gets or sets a value which indicates whether the control should be updated after
                the current callback. Also see <see cref="P:Anthem.IUpdatableControl.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.IUpdatableControl.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.IUpdatableControl.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="T:Anthem.Image">
            <summary>
            Creates an updatable control that displays an image on a Web page. 
            </summary>
        </member>
        <member name="M:Anthem.Image.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.Image.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.Image.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.Image.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.Image.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Image.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.Image.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Image.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.GridView">
            <summary>
            Creates an updatable control that displays the values of a data source in a table where each column represents a field and each row represents a record. The GridView control allows you to select, sort, and edit these items using callbacks.
            </summary>
        </member>
        <member name="T:Anthem.ICallBackControl">
            <summary>
            Controls that implement this interface will implement a callback
            for each supported event, unless EnableCallBack is false;
            </summary>
        </member>
        <member name="P:Anthem.ICallBackControl.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.ICallBackControl.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.ICallBackControl.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.ICallBackControl.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.ICallBackControl.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.ICallBackControl.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.ICallBackControl.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="T:Anthem.ICallBackContainerControl">
            <summary>
            Controls that implement this interface act as a container for
            other controls that may generate postbacks. When AddCallBacks
            is true, this control will inject callbacks into all the
            child controls.
            </summary>
        </member>
        <member name="P:Anthem.ICallBackContainerControl.AddCallBacks">
            <summary>
            Gets or sets a value indicating whether the control should convert child control postbacks into callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the control should convert child control postbacks to
            callbacks; otherwise, <strong>false</strong>. The default is
            <strong>true</strong>.
            </value>
            <remarks>
            Only controls that <see cref="T:Anthem.Manager"/> recognizes will be converted.
            </remarks>
        </member>
        <member name="M:Anthem.GridView.OnDataPropertyChanged">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.GridView.OnDataPropertyChanged"/>, 
            then sets <see cref="P:Anthem.GridView.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.GridView.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.GridView.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.GridView.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.GridView.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.GridView.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.GridView.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.GridView.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.GridView.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.GridView.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.GridView.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.GridView.AddCallBacks">
            <summary>
            Gets or sets a value indicating whether the control should convert child control postbacks into callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the control should convert child control postbacks to
            callbacks; otherwise, <strong>false</strong>. The default is
            <strong>true</strong>.
            </value>
            <remarks>
            Only controls that <see cref="T:Anthem.Manager"/> recognizes will be converted.
            </remarks>
        </member>
        <member name="P:Anthem.GridView.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.GridView.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.GridView.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.GridView.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.GridView.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.RangeValidator">
            <summary>
            Creates an updatable control that checks whether the value of an input control is within a specified range of values.
            </summary>
        </member>
        <member name="M:Anthem.RangeValidator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.RangeValidator.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.RangeValidator.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.RangeValidator.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.RangeValidator.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.RangeValidator.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.RangeValidator.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.RangeValidator.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.ImageButton">
            <summary>
            Creates an updatable control that displays an image and responds to mouse clicks on the image using callbacks.
            </summary>
        </member>
        <member name="M:Anthem.ImageButton.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the <strong>onclick</strong> attribute to invoke a callback from the client, then renders
            the attributes of the control to the output stream.
            </summary>
        </member>
        <member name="M:Anthem.ImageButton.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.ImageButton.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.ImageButton.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.ImageButton.ImageUrlDuringCallBack">
            <summary>Gets or sets the url of the image to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback is an &lt;image&gt; then the src property of the
            element is updated during the callback to the value of ImageUrlDuringCallBack, otherwise the 
            associated &lt;label&gt; text is updated during the callback.
            If the element is not an &lt;image&gt;, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.ImageButton.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.ImageButton.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.ImageButton.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.ImageButton.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.ImageButton.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.ImageButton.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.ImageButton.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.ImageButton.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.ImageButton.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.ImageButton.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.ImageButton.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.ImageButton.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.Timer">
            <summary>
            Creates an updatable timer control.
            </summary>
        </member>
        <member name="M:Anthem.Timer.DoTick">
            <summary>
            This method is called by the Timer control each time the timer expires.
            </summary>
        </member>
        <member name="M:Anthem.Timer.StartTimer">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Anthem.Timer.StopTimer">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Anthem.Timer.OnTick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Anthem.Timer.Tick"/> event.
            </summary>
        </member>
        <member name="M:Anthem.Timer.OnPreRender(System.EventArgs)">
            <summary>
            Registers the client side script for the control.
            </summary>
        </member>
        <member name="M:Anthem.Timer.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="P:Anthem.Timer.Enabled">
            <summary>
            True if the timer is enabled on the client. The timer will continue to call the
            DoTick method while it is enabled.
            </summary>
        </member>
        <member name="P:Anthem.Timer.Interval">
            <summary>
            The number of milliseconds between each call to DoTick.
            </summary>
        </member>
        <member name="E:Anthem.Timer.Tick">
            <summary>
            Occurs when the timer expires.
            </summary>
        </member>
        <member name="P:Anthem.Timer.Visible">
            <summary>
            Visible is inherited from Control, but ignored by Timer.
            </summary>
        </member>
        <member name="T:Anthem.Calendar">
            <summary>
            Displays an updatable single-month calendar that allows the user to select dates and move to the next or previous month using callbacks.
            </summary>
        </member>
        <member name="M:Anthem.Calendar.OnSelectionChanged">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.Calendar.OnSelectionChanged"/>, 
            then sets <see cref="P:Anthem.Calendar.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.Calendar.OnVisibleMonthChanged(System.DateTime,System.DateTime)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.Calendar.OnVisibleMonthChanged(System.DateTime,System.DateTime)"/>, 
            then sets <see cref="P:Anthem.Calendar.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.Calendar.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.Calendar.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.Calendar.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.Calendar.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.Calendar.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.Calendar.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.Calendar.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.Calendar.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.Calendar.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.Calendar.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.Calendar.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.Calendar.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Calendar.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.Calendar.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Calendar.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.CustomValidator">
            <summary>
            Creates an updatable control that performs user-defined validation on an input control.
            </summary>
        </member>
        <member name="M:Anthem.CustomValidator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.CustomValidator.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.CustomValidator.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.CustomValidator.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.CustomValidator.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.CustomValidator.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.CustomValidator.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.CustomValidator.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.DropDownList">
            <summary>
            Creates an updatable control that allows the user to select a single item from a drop-down list.
            </summary>
        </member>
        <member name="M:Anthem.DropDownList.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the <strong>onchange</strong> attribute to invoke a callback from the client, then renders
            the attributes of the control to the output stream.
            </summary>
        </member>
        <member name="M:Anthem.DropDownList.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.DropDownList.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.DropDownList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.DropDownList.AutoCallBack">
            <summary>
            Gets or sets a value indicating whether the Checkbox state automatically calls back to
            the server when clicked. Mimics the AutoPostBack property.
            </summary>
        </member>
        <member name="P:Anthem.DropDownList.Items">
            <summary>
            Override Items collection to force PersistenceMode.InnerProperty. This will cause the control to
            wrap the ListItems inside of an &lt;Items&gt; tag which the Visual Studio designer will validate.
            If you don't do this, the designer will complain that the "Element 'ListItem' is not a known element."
            </summary>
        </member>
        <member name="P:Anthem.DropDownList.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.DropDownList.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.DropDownList.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.DropDownList.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.DropDownList.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.DropDownList.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.DropDownList.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.DropDownList.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.DropDownList.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.DropDownList.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.DropDownList.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.DropDownList.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.View">
            <summary>
            Represents a control that acts as a container for a group of controls within a <see cref="T:Anthem.MultiView"/> control.
            </summary>
        </member>
        <member name="T:Anthem.DataList">
            <summary>
            An updatable data bound list control that displays items using templates.
            </summary>
            <remarks>
                Builtin commands (Edit, Delete, etc.) will use callbacks if
                <see cref="P:Anthem.DataList.EnableCallBack"/> is <strong>true</strong>. Child controls will use
                callbacks if <see cref="P:Anthem.DataList.AddCallBacks"/> is <strong>true</strong>.
            </remarks>
        </member>
        <member name="M:Anthem.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)"/>, 
            then sets <see cref="P:Anthem.DataList.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)"/>, 
            then sets <see cref="P:Anthem.DataList.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)"/>, 
            then sets <see cref="P:Anthem.DataList.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DataList.OnItemCommand(System.Web.UI.WebControls.DataListCommandEventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.DataList.OnItemCommand(System.Web.UI.WebControls.DataListCommandEventArgs)"/>, 
            then sets <see cref="P:Anthem.DataList.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DataList.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.BaseDataList.OnSelectedIndexChanged(System.EventArgs)"/>, 
            then sets <see cref="P:Anthem.DataList.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)"/>, 
            then sets <see cref="P:Anthem.DataList.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DataList.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control inside of a &lt;div&gt; element to the specified HTML writer.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"/> that contains the output stream to render on the client.</param>
        </member>
        <member name="M:Anthem.DataList.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers this control with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Anthem.DataList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
                Renders the control contents. <see cref="T:Anthem.Manager"/> will determine if
                the control is rendered on the client.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"/> that contains the output stream to render on the client.</param>
        </member>
        <member name="P:Anthem.DataList.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.DataList.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.DataList.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.DataList.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.DataList.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.DataList.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.DataList.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.DataList.AddCallBacks">
            <summary>
            Gets or sets a value indicating whether the control should convert child control postbacks into callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the control should convert child control postbacks to
            callbacks; otherwise, <strong>false</strong>. The default is
            <strong>true</strong>.
            </value>
            <remarks>
            Only controls that <see cref="T:Anthem.Manager"/> recognizes will be converted.
            </remarks>
        </member>
        <member name="P:Anthem.DataList.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.DataList.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.DataList.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.DataList.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.DataList.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.CheckBox">
            <summary>
            Displays an updatable check box that allows the user to select a <strong>true</strong> or <strong>false</strong> condition. Uses callbacks if <see cref="P:Anthem.CheckBox.AutoCallBack"/> is <strong>true</strong>.
            </summary>
        </member>
        <member name="M:Anthem.CheckBox.OnPreRender(System.EventArgs)">
            <summary>
            Use OnPreRender with CheckBox. AddAttributesToRender is not
            called in ASP.NET 1.1
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Anthem.CheckBox.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.CheckBox.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.CheckBox.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.CheckBox.AutoCallBack">
            <summary>
            Gets or sets a value indicating whether the Checkbox state automatically calls back to
            the server when clicked. Mimics the AutoPostBack property.
            </summary>
        </member>
        <member name="P:Anthem.CheckBox.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.CheckBox.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.CheckBox.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.CheckBox.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.CheckBox.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.CheckBox.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.CheckBox.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.CheckBox.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.CheckBox.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.CheckBox.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.CheckBox.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.CheckBox.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.Repeater">
            <summary>
            An updatable data-bound list control that allows custom layout by repeating a
            specified template for each item displayed in the list.
            </summary>
        </member>
        <member name="M:Anthem.Repeater.OnItemCommand(System.Web.UI.WebControls.RepeaterCommandEventArgs)">
            <summary>
                Raises the <see cref="E:System.Web.UI.WebControls.Repeater.ItemCommand"/> and sets
                <see cref="P:Anthem.Repeater.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.Repeater.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.Repeater.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.Repeater.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.Repeater.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.Repeater.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.Repeater.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.Repeater.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.Repeater.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.Repeater.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.Repeater.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.Repeater.AddCallBacks">
            <summary>
            Gets or sets a value indicating whether the control should convert child control postbacks into callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the control should convert child control postbacks to
            callbacks; otherwise, <strong>false</strong>. The default is
            <strong>true</strong>.
            </value>
            <remarks>
            Only controls that <see cref="T:Anthem.Manager"/> recognizes will be converted.
            </remarks>
        </member>
        <member name="P:Anthem.Repeater.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.Repeater.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Repeater.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.Repeater.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Repeater.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.RadioButtonList">
            <summary>
            Creates an updatable list control that encapsulates a group of radio button controls.
            </summary>
        </member>
        <member name="M:Anthem.RadioButtonList.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.BaseDataList.OnSelectedIndexChanged(System.EventArgs)"/>, 
            then sets <see cref="P:Anthem.RadioButtonList.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.RadioButtonList.RenderItem(System.Web.UI.WebControls.ListItemType,System.Int32,System.Web.UI.WebControls.RepeatInfo,System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the <strong>onclick</strong> attribute to each item to invoke a callback from the client, 
            then renders the item.
            </summary>
        </member>
        <member name="M:Anthem.RadioButtonList.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.RadioButtonList.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.RadioButtonList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.RadioButtonList.AutoCallBack">
            <summary>
            Gets or sets a value indicating whether the Checkbox state automatically calls back to
            the server when clicked. Mimics the AutoPostBack property.
            </summary>
        </member>
        <member name="P:Anthem.RadioButtonList.Items">
            <summary>
            Override Items collection to force PersistenceMode.InnerProperty. This will cause the control to
            wrap the ListItems inside of an &lt;Items&gt; tag which the Visual Studio designer will validate.
            If you don't do this, the designer will complain that the "Element 'ListItem' is not a known element."
            </summary>
        </member>
        <member name="P:Anthem.RadioButtonList.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.RadioButtonList.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.RadioButtonList.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.RadioButtonList.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.RadioButtonList.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.RadioButtonList.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.RadioButtonList.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.RadioButtonList.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.RadioButtonList.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.RadioButtonList.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.RadioButtonList.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.RadioButtonList.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.CheckBoxList">
            <summary>
            Creates an updatable multi selection check box group that can be dynamically created by binding the control to a data source. Uses callbacks if <see cref="P:Anthem.CheckBoxList.AutoCallBack"/> is <strong>true</strong>.
            </summary>
        </member>
        <member name="M:Anthem.CheckBoxList.OnPreRender(System.EventArgs)">
            <summary>
            Adds the <strong>onclick</strong> attribute to invoke a callback from the client.
            </summary>
        </member>
        <member name="M:Anthem.CheckBoxList.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.CheckBoxList.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.CheckBoxList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.CheckBoxList.AutoCallBack">
            <summary>
            Gets or sets a value indicating whether the Checkbox state automatically calls back to
            the server when clicked. Mimics the AutoPostBack property.
            </summary>
        </member>
        <member name="P:Anthem.CheckBoxList.Items">
            <summary>
            Override Items collection to force PersistenceMode.InnerProperty. This will cause the control to
            wrap the ListItems inside of an &lt;Items&gt; tag which the Visual Studio designer will validate.
            If you don't do this, the designer will complain that the "Element 'ListItem' is not a known element."
            </summary>
        </member>
        <member name="P:Anthem.CheckBoxList.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.CheckBoxList.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.CheckBoxList.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.CheckBoxList.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.CheckBoxList.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.CheckBoxList.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.CheckBoxList.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.CheckBoxList.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.CheckBoxList.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.CheckBoxList.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.CheckBoxList.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.CheckBoxList.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.MultiView">
            <summary>
            Creates an updatable control that acts as a container for a group of <see cref="T:Anthem.View"/> controls.
            </summary>
        </member>
        <member name="M:Anthem.MultiView.OnActiveViewChanged(System.EventArgs)">
            <summary>
                Raises the <see cref="E:System.Web.UI.WebControls.MultiView.ActiveViewChanged"/>
                event and sets <see cref="P:Anthem.MultiView.UpdateAfterCallBack"/> to <strong>true</strong>.
            </summary>
        </member>
        <member name="M:Anthem.MultiView.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.MultiView.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.MultiView.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.MultiView.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.MultiView.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.MultiView.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.MultiView.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.MultiView.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.Manager">
            <summary>
            The Manager class is responsible for managing all of the interaction between ASP.NET
            and the Anthem controls.
            </summary>
        </member>
        <member name="M:Anthem.Manager.AddScriptAttribute(System.Web.UI.WebControls.WebControl,System.String,System.String)">
            <summary>Adds the script to the control's attribute collection.</summary>
            <remarks>
            If the attribute already exists, the script is prepended to the existing
            value.
            </remarks>
            <param name="control">The control to modify.</param>
            <param name="attributeName">The attribute to modify.</param>
            <param name="script">The script to add to the attribute.</param>
        </member>
        <member name="M:Anthem.Manager.AddScriptAttribute(System.Web.UI.WebControls.WebControl,System.Web.UI.WebControls.ListItem,System.String,System.String)">
            <summary>Adds the script to the item's attribute collection.</summary>
            <param name="control">The control to modify.</param>
            <param name="item">The <see cref="T:System.Web.UI.WebControls.ListItem"/> to modify.</param>
            <param name="attributeName">The attribute to modify.</param>
            <param name="script">The script to add.</param>
        </member>
        <member name="M:Anthem.Manager.AddScriptForClientSideEval(System.String)">
            <summary>
            Add the script to a list of scripts to be evaluated on the client during the
            callback response processing.
            </summary>
            <remarks>To not include &lt;script&gt;&lt;/script&gt; tags.</remarks>
            <example>
            	<code lang="CS" title="[New Example]" description="This example adds an alert message that will be displayed on the client during callback response processing.">
            Anthem.Manager.AddScriptForClientSideEval("alert('Hello');");
                </code>
            </example>
            <param name="script">The script to evaluate.</param>
        </member>
        <member name="M:Anthem.Manager.GetCallbackEventReference(Anthem.ICallBackControl,System.Boolean,System.String)">
            <summary>
            Obtains a reference to a clinet-side javascript function that causes, when
            invoked, the client to callback to the server.
            </summary>
        </member>
        <member name="M:Anthem.Manager.GetCallbackEventReference(Anthem.ICallBackControl,System.String,System.Boolean,System.String)">
            <summary>
            Obtains a reference to a clinet-side javascript function that causes, when
            invoked, the client to callback to the server.
            </summary>
        </member>
        <member name="M:Anthem.Manager.GetCallbackEventReference(Anthem.ICallBackControl,System.Boolean,System.String,System.String)">
            <summary>
            Obtains a reference to a clinet-side javascript function that causes, when
            invoked, the client to callback to the server.
            </summary>
        </member>
        <member name="M:Anthem.Manager.GetCallbackEventReference(Anthem.ICallBackControl,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Obtains a reference to a clinet-side javascript function that causes, when
            invoked, the client to callback to the server.
            </summary>
        </member>
        <member name="M:Anthem.Manager.GetControlVisible(System.Web.UI.Control,System.Web.UI.StateBag,System.Boolean)">
            <summary>Returns a value indicating if the control is visible on the client.</summary>
        </member>
        <member name="M:Anthem.Manager.GetManager">
            <summary>Returns a refernce to <see cref="T:Anthem.Manager"/>.</summary>
        </member>
        <member name="M:Anthem.Manager.GetStringEndingWithSemicolon(System.String)">
            <summary>Returns the input string ending with a semicolon (;).</summary>
        </member>
        <member name="M:Anthem.Manager.Register(System.Web.UI.Page)">
            <summary>Registers the page with <see cref="T:Anthem.Manager"/>.</summary>
        </member>
        <member name="M:Anthem.Manager.Register(System.Web.UI.Control)">
            <summary>Registers the control with <see cref="T:Anthem.Manager"/>.</summary>
        </member>
        <member name="M:Anthem.Manager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
            <summary>
            Registers the client script with the Page object and with Anthem.Manager using a 
            type, key, and script literal.
            </summary>
            <param name="type">The type of the client script to register.</param>
            <param name="key">The key of the client script to register.</param>
            <param name="script">The client script literal to register.</param>
            <remarks>
            <para>A client script is uniquely identified by its key and its type. 
            Scripts with the same key and type are considered duplicates. 
            Only one script with a given type and key pair can be registered with the page. 
            Attempting to register a script that is already registered does not create a 
            duplicate of the script.</para>
            <para>Call the Page.IsClientScriptBlockRegistered method to 
            determine whether a client script with a given key and type pair is already 
            registered and avoid unnecessarily attempting to add the script.</para>
            <para>In this overload of the RegisterClientScriptBlock method, 
            you must make sure that the script provided in the script parameter 
            is wrapped in a &lt;script&gt; element block.</para>
            <para>The RegisterClientScriptBlock method adds a script block to the 
            top of the rendered page when it is first rendered. All script blocks are
            rendered in the &lt;head&gt; of the page during callback processing after
            the page updates have been applied.</para>
            </remarks>
        </member>
        <member name="M:Anthem.Manager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
            <summary>
            Registers the client script with the Page object and with Anthem.Manager using a 
            type, key, and script literal.
            </summary>
            <param name="type">The type of the client script to register.</param>
            <param name="key">The key of the client script to register.</param>
            <param name="script">The client script literal to register.</param>
            <param name="addScriptTags">A Boolean value indicating whether to add
            script tags.</param>
            <remarks>
            <para>A client script is uniquely identified by its key and its type. 
            Scripts with the same key and type are considered duplicates. 
            Only one script with a given type and key pair can be registered with the page. 
            Attempting to register a script that is already registered does not create a 
            duplicate of the script.</para>
            <para>Call the IsClientScriptBlockRegistered method to 
            determine whether a client script with a given key and type pair is already 
            registered and avoid unnecessarily attempting to add the script.</para>
            <para>In this overload of the RegisterClientScriptBlock method, you can indicate 
            whether the script provided in the script parameter is wrapped with a &lt;script&gt;
            element block by using the addScriptTags parameter. Setting addScriptTags to 
            true indicates that script tags will be added automatically.</para>
            <para>The RegisterClientScriptBlock method adds a script block to the 
            top of the rendered page when it is first rendered. All script blocks are
            rendered in the &lt;head&gt; of the page during callback processing after
            the page updates have been applied.</para>
            </remarks>
        </member>
        <member name="M:Anthem.Manager.RegisterClientScriptInclude(System.String,System.String)">
            <summary>
            Registers the client script include with the Page object and Anthem.Manager 
            using a key, and a URL.
            </summary>
            <param name="key">The key of the client script include to register.</param>
            <param name="url">The URL of the client script include to register.</param>
            <remarks>
            <para>This overload of the RegisterClientScriptInclude method takes key and 
            url parameters to identify the script include.</para>
            <para>To resolve the client URL, use the ResolveClientUrl method. This method 
            uses the context of the URL on which it is called to resolve the path.</para>
            <para>This method adds a script block at the top of the rendered page during
            the initial load and in the &lt;head&gt; element block after each callback.
            </para>
            </remarks>
        </member>
        <member name="M:Anthem.Manager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
            <summary>
            Registers the client script include with the Page object and Anthem.Manager 
            using a type, a key, and a URL.
            </summary>
            <param name="type">The type of the client script include to register.</param>
            <param name="key">The key of the client script include to register.</param>
            <param name="url">The URL of the client script include to register.</param>
            <remarks>
            <para>This overload of the RegisterClientScriptInclude method takes key and 
            url parameters to identify the script, as well as a type parameter to specify 
            the identification of the client script include. You specify the type based 
            on the object that will be accessing the resource. For instance, when using a 
            Page instance to access the resource, you specify the Page type.</para>
            <para>To resolve the client URL, use the ResolveClientUrl method. This method 
            uses the context of the URL on which it is called to resolve the path.</para>
            <para>This method adds a script block at the top of the rendered page during
            the initial load and in the &lt;head&gt; element block after each callback.
            </para>
            </remarks>
        </member>
        <member name="M:Anthem.Manager.RegisterClientScriptResource(System.Type,System.String)">
            <summary>
            Registers the client script resource with the Page object and with Anthem.Manager
            using a type and a resource name.
            </summary>
            <param name="type">The type of the client script resource to register.</param>
            <param name="resourceName">The name of the client script resource to register.</param>
            <remarks>
            <para>The RegisterClientScriptResource method is used when accessing compiled-in 
            resources from assemblies through the WebResource.axd HTTP handler. The 
            RegisterClientScriptResource method registers the script with the Page object 
            and prevents duplicate scripts. This method wraps the contents of the resource 
            URL with a &lt;script&gt; element block.</para>
            </remarks>
        </member>
        <member name="M:Anthem.Manager.RegisterPageScriptBlock(System.String,System.String)">
            <summary>
            Registers the client script with Anthem.Manager using a key and a script literal.
            </summary>
            <param name="key">The key of the client script to register.</param>
            <param name="script">The client script literal to register.</param>
            <remarks>
            <para>A client script is uniquely identified by its key. 
            Scripts with the same key are considered duplicates. 
            Only one script with a given key can be registered with Anthem.Manager. 
            Attempting to register a script that is already registered does not create a 
            duplicate of the script.</para>
            <para>The script block added by the RegisterPageScriptBlock can be wrapped
            with a &lt;script&gt; element block, though this is not required.</para>
            <para>The script block added by RegisterPageScriptBlock will only be rendered
            by Anthem.Manager during callback processing. If you want to render the script
            during the initial load use RegisterClientScriptBlock or RegisterStartupScript.</para>
            <para>The script block added by RegisterPageScriptBlock will be rendered in
            the &lt;head&gt; element block after the page updates have been applied.</para>
            </remarks>
        </member>
        <member name="M:Anthem.Manager.RegisterStartupScript(System.Type,System.String,System.String)">
            <summary>
            Registers the client script with the Page object and with Anthem.Manager using a 
            type, key, and script literal.
            </summary>
            <param name="type">The type of the client script to register.</param>
            <param name="key">The key of the client script to register.</param>
            <param name="script">The client script literal to register.</param>
            <remarks>
            <para>A client script is uniquely identified by its key and its type. 
            Scripts with the same key and type are considered duplicates. 
            Only one script with a given type and key pair can be registered with the page. 
            Attempting to register a script that is already registered does not create a 
            duplicate of the script.</para>
            <para>Call the Page.IsClientScriptBlockRegistered method to 
            determine whether a client script with a given key and type pair is already 
            registered and avoid unnecessarily attempting to add the script.</para>
            <para>In this overload of the RegisterStartupScript method, 
            you must make sure that the script provided in the script parameter 
            is wrapped in a &lt;script&gt; element block.</para>
            <para>The script block added by the RegisterStartupScript method executes 
            when the page finishes loading but before the page's OnLoad event is raised.
            All script blocks are rendered in the &lt;head&gt; of the page during callback 
            processing after the page updates have been applied.</para>
            </remarks>
        </member>
        <member name="M:Anthem.Manager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
            <summary>
            Registers the client script with the Page object and with Anthem.Manager using a 
            type, key, and script literal.
            </summary>
            <param name="type">The type of the client script to register.</param>
            <param name="key">The key of the client script to register.</param>
            <param name="script">The client script literal to register.</param>
            <param name="addScriptTags">A Boolean value indicating whether to add
            script tags.</param>
            <remarks>
            <para>A client script is uniquely identified by its key and its type. 
            Scripts with the same key and type are considered duplicates. 
            Only one script with a given type and key pair can be registered with the page. 
            Attempting to register a script that is already registered does not create a 
            duplicate of the script.</para>
            <para>Call the Page.IsClientScriptBlockRegistered method to 
            determine whether a client script with a given key and type pair is already 
            registered and avoid unnecessarily attempting to add the script.</para>
            <para>In this overload of the RegisterStartupScript method, you can indicate 
            whether the script provided in the script parameter is wrapped with a &lt;script&gt;
            element block by using the addScriptTags parameter. Setting addScriptTags to 
            true indicates that script tags will be added automatically.</para>
            <para>The script block added by the RegisterStartupScript method executes 
            when the page finishes loading but before the page's OnLoad event is raised.
            All script blocks are rendered in the &lt;head&gt; of the page during callback 
            processing after the page updates have been applied.</para>
            </remarks>
        </member>
        <member name="M:Anthem.Manager.SetControlVisible(System.Web.UI.StateBag,System.Boolean)">
            <summary>Sets the visibility of the control on the client.</summary>
        </member>
        <member name="M:Anthem.Manager.WriteBeginControlMarker(System.Web.UI.HtmlTextWriter,System.String,System.Web.UI.Control)">
            <summary>
            This method needs to be called by custom controls that want their
            innerHTML to be automatically updated on the client pages during
            call backs. Call this at the top of the Render override. The
            parentTagName argument should be "div" or "span" depending on the
            type of control. It's this parent element that actually gets its
            innerHTML updated after call backs.
            </summary>
            <param name="writer"></param>
            <param name="parentTagName"></param>
            <param name="control"></param>
        </member>
        <member name="M:Anthem.Manager.WriteEndControlMarker(System.Web.UI.HtmlTextWriter,System.String,System.Web.UI.Control)">
            <summary>
            This method needs to be called by custom controls that want their
            innerHTML to be automatically updated on the client pages during
            call backs. Call this at the bottom of the Render override.
            </summary>
            <param name="writer"></param>
            <param name="parentTagName"></param>
            <param name="control"></param>
        </member>
        <member name="M:Anthem.Manager.WriteResult(System.Web.HttpResponse,System.Object,System.String)">
            <summary>Writes the val and error to the callback response.</summary>
        </member>
        <member name="M:Anthem.Manager.WriteValue(System.Text.StringBuilder,System.Object)">
            <summary>
            Writes the val to sb in a format that can be interpreted by Anthem.js on the
            client.
            </summary>
        </member>
        <member name="M:Anthem.Manager.FireEvent">
            <summary>
            This is an empty method used as the target for the
            Anthem_FireEvent function. That function sets the
            __EVENTTARGET to the desired ID which causes the
            appropriate event to fire on the server so nothing
            needs to be done here.
            </summary>
        </member>
        <member name="M:Anthem.Manager.AddCallBacks(System.Web.UI.Control,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Add generic callbacks events to all the child controls in the
            container. This is used by template controls (eg. DataGrid).
            </summary>
            <param name="control">The container control.</param>
            <param name="enabledDuringCallBack">
            	<strong>true</strong> if the control should be enabled on the client during a
            callback.
            </param>
            <param name="textDuringCallBack">The text to display during a callback.</param>
            <param name="preCallBackFunction">The javascript function to execute before starting the callback.</param>
            <param name="postCallBackFunction">
            The javascript function to execute after the callback response is
            received.
            </param>
            <param name="callBackCancelledFunction">
            The javascript function to execute if the callback is cancelled by the
            pre-callback function.
            </param>
        </member>
        <member name="M:Anthem.Manager.GetAllChildControls(System.Web.UI.Control)">
            <summary>
            Returns a flattened list of all the non-Anthem controls
            in a container. Container controls such as Panel are not
            expanded.
            </summary>
            <param name="control">The container control.</param>
            <returns>An ArrayList of non-Anthem controls.</returns>
        </member>
        <member name="M:Anthem.Manager.AddEventHandler(System.Web.UI.Control,System.Web.UI.WebControls.WebControl,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Add a generic callback to the target control.
            </summary>
            <remarks>The target control is most often the same as the control that
            is raising the event, but the GridView (for example) is the target for all of it's 
            generated child controls.</remarks>
        </member>
        <member name="M:Anthem.Manager.GetControls(System.String)">
            <summary>
            Returns a hashtable of the HTML for the AJAX-ified controls
            on the page. These strings are returned to the client which
            updates the page (using innerHTML).
            This method is pretty messy but it seems to work (it's hard to
            to tell without proper unit tests--shame on me).
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Anthem.Manager.OnUnload(System.Object,System.EventArgs)">
            <summary>
            Used to catch Response.Redirect() during a callback. If it is a redirect
            the response is converted back into a normal response and the appropriate
            javascript is returned to redirect the client.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Anthem.Manager.CallBackID">
            <summary>
            A string which uniquely identifies the current callback.
            </summary>
        </member>
        <member name="P:Anthem.Manager.CallBackMethod">
            <summary>
            The method to invoke during the callback.
            </summary>
        </member>
        <member name="P:Anthem.Manager.CallBackType">
            <summary>
            A string value which indicates whether the callback is being made
            using XMLHttpRequest or a hidden IFRAME.
            </summary>
        </member>
        <member name="P:Anthem.Manager.IncludePageScripts">
            <summary>
            When true, Anthem.Manager will include all page level scripts in the 
            callback response. Use this if you add or show 3rd party controls during 
            the callback that add or change client scripts in the page.
            </summary>
        </member>
        <member name="P:Anthem.Manager.IsCallBack">
            <summary>
            Returns <strong>true</strong> if the current POST is a callback.
            </summary>
        </member>
        <member name="T:Anthem.Debugger">
            <summary>
            
            </summary>
        </member>
        <member name="M:Anthem.Debugger.CreateChildControls">
            <summary></summary>
        </member>
        <member name="M:Anthem.Debugger.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.Debugger.OnPreRender(System.EventArgs)">
            <summary></summary>
        </member>
        <member name="M:Anthem.Debugger.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.Debugger.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.Debugger.DebugRequestText">
            <summary></summary>
        </member>
        <member name="P:Anthem.Debugger.DebugResponseText">
            <summary></summary>
        </member>
        <member name="P:Anthem.Debugger.DebugErrors">
            <summary></summary>
        </member>
        <member name="P:Anthem.Debugger.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.Debugger.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.Debugger.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Debugger.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.Debugger.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Debugger.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.BulletedList">
            <summary>
            Creates an updatable control that generates a list of items in a bulletd format.
            </summary>
        </member>
        <member name="M:Anthem.BulletedList.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the <strong>onclick</strong> attribute to invoke a callback from the client, then renders
            the attributes of the control to the output stream.
            </summary>
        </member>
        <member name="M:Anthem.BulletedList.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.BulletedList.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.BulletedList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.BulletedList.Items">
            <summary>
            Override Items collection to force PersistenceMode.InnerProperty. This will cause the control to
            wrap the ListItems inside of an &lt;Items&gt; tag which the Visual Studio designer will validate.
            If you don't do this, the designer will complain that the "Element 'ListItem' is not a known element."
            </summary>
        </member>
        <member name="P:Anthem.BulletedList.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.BulletedList.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.BulletedList.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.BulletedList.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.BulletedList.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.BulletedList.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.BulletedList.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.BulletedList.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.BulletedList.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.BulletedList.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.BulletedList.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.BulletedList.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.HiddenField">
            <summary>
            Creates an updatable hidden field used to store a non-displayed value.
            </summary>
        </member>
        <member name="M:Anthem.HiddenField.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.HiddenField.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.HiddenField.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.HiddenField.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.HiddenField.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.HiddenField.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.HiddenField.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.HiddenField.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.DetailsView">
            <summary>
            Creates an updatable control that displays the values of a single record from a data source in a table, where each data row represents a field of the record. The <strong>DetailsView</strong> control allows you to edit, delete, and insert records using callbacks.
            </summary>
        </member>
        <member name="M:Anthem.DetailsView.OnDataPropertyChanged">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.DataBoundControl.OnDataPropertyChanged"/>, 
            then sets <see cref="P:Anthem.DetailsView.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DetailsView.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.DetailsView.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.DetailsView.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.DetailsView.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.DetailsView.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.DetailsView.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.DetailsView.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.DetailsView.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.DetailsView.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.DetailsView.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.DetailsView.AddCallBacks">
            <summary>
            Gets or sets a value indicating whether the control should convert child control postbacks into callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the control should convert child control postbacks to
            callbacks; otherwise, <strong>false</strong>. The default is
            <strong>true</strong>.
            </value>
            <remarks>
            Only controls that <see cref="T:Anthem.Manager"/> recognizes will be converted.
            </remarks>
        </member>
        <member name="P:Anthem.DetailsView.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.DetailsView.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.DetailsView.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.DetailsView.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.DetailsView.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.WebPartZone">
            <summary>
            Creates an updatable control in the Web Parts control set for hosting WebPart controls on a Web page. 
            </summary>
        </member>
        <member name="M:Anthem.WebPartZone.OnPreRender(System.EventArgs)">
            <summary>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Anthem.WebPartZone.MinimizeWebPart(System.Web.UI.WebControls.WebParts.WebPart)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.WebParts.WebPartZoneBase.MinimizeWebPart(System.Web.UI.WebControls.WebParts.WebPart)"/>, 
            then sets <see cref="P:Anthem.WebPartZone.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.WebPartZone.RestoreWebPart(System.Web.UI.WebControls.WebParts.WebPart)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.WebParts.WebPartZoneBase.RestoreWebPart(System.Web.UI.WebControls.WebParts.WebPart)"/>, 
            then sets <see cref="P:Anthem.WebPartZone.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.WebPartZone.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.WebParts.WebPartZoneBase.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)"/>, 
            then sets <see cref="P:Anthem.WebPartZone.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.WebPartZone.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.WebPartZone.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.WebPartZone.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.WebPartZone.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.WebPartZone.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.WebPartZone.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.WebPartZone.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.WebPartZone.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.TextBox">
            <summary>
            Creates an updatable text box control for user input.
            </summary>
        </member>
        <member name="M:Anthem.TextBox.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the <strong>onchange</strong> attribute to invoke a callback from the client, then renders
            the attributes of the control to the output stream.
            </summary>
        </member>
        <member name="M:Anthem.TextBox.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.TextBox.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.TextBox.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.TextBox.AutoCallBack">
            <summary>
            Gets or sets a value indicating whether the Checkbox state automatically calls back to
            the server when clicked. Mimics the AutoPostBack property.
            </summary>
        </member>
        <member name="P:Anthem.TextBox.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.TextBox.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.TextBox.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.TextBox.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.TextBox.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.TextBox.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.TextBox.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.TextBox.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.TextBox.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.TextBox.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.TextBox.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.TextBox.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.RadioButton">
            <summary>
            Creates an updatable radio button control. 
            </summary>
        </member>
        <member name="M:Anthem.RadioButton.OnPreRender(System.EventArgs)">
            <summary>
            Use OnPreRender. AddAttributesToRender is not called in ASP.NET 1.1.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Anthem.RadioButton.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.RadioButton.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.RadioButton.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.RadioButton.AutoCallBack">
            <summary>
            Gets or sets a value indicating whether the Checkbox state automatically calls back to
            the server when clicked. Mimics the AutoPostBack property.
            </summary>
        </member>
        <member name="P:Anthem.RadioButton.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.RadioButton.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.RadioButton.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.RadioButton.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.RadioButton.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.RadioButton.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.RadioButton.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.RadioButton.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.RadioButton.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.RadioButton.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.RadioButton.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.RadioButton.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.AdRotator">
            <summary>
            Displays an updatable advertisement banner on a web page.
            </summary>
        </member>
        <member name="M:Anthem.AdRotator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.AdRotator.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.AdRotator.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.AdRotator.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.AdRotator.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.AdRotator.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.AdRotator.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.AdRotator.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.Table">
            <summary>
            Creates an updatable table control.
            </summary>
        </member>
        <member name="M:Anthem.Table.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.Table.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.Table.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.Table.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.Table.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.Table.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.Table.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.Table.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.Table.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.Table.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.Table.AddCallBacks">
            <summary>
            Gets or sets a value indicating whether the control should convert child control postbacks into callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the control should convert child control postbacks to
            callbacks; otherwise, <strong>false</strong>. The default is
            <strong>true</strong>.
            </value>
            <remarks>
            Only controls that <see cref="T:Anthem.Manager"/> recognizes will be converted.
            </remarks>
        </member>
        <member name="P:Anthem.Table.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.Table.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Table.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.Table.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Table.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.ListBox">
            <summary>
            Creates an updatable list box control that allows single or multiple item selection.
            </summary>
        </member>
        <member name="M:Anthem.ListBox.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the <strong>onchange</strong> attribute to invoke a callback from the client, then renders
            the attributes of the control to the output stream.
            </summary>
        </member>
        <member name="M:Anthem.ListBox.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.ListBox.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.ListBox.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.ListBox.AutoCallBack">
            <summary>
            Gets or sets a value indicating whether the Checkbox state automatically calls back to
            the server when clicked. Mimics the AutoPostBack property.
            </summary>
        </member>
        <member name="P:Anthem.ListBox.Items">
            <summary>
            Override Items collection to force PersistenceMode.InnerProperty. This will cause the control to
            wrap the ListItems inside of an &lt;Items&gt; tag which the Visual Studio designer will validate.
            If you don't do this, the designer will complain that the "Element 'ListItem' is not a known element."
            </summary>
        </member>
        <member name="P:Anthem.ListBox.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.ListBox.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.ListBox.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.ListBox.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.ListBox.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.ListBox.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.ListBox.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.ListBox.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.ListBox.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.ListBox.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.ListBox.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.ListBox.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.Panel">
            <summary>
            Creates an updatable control that acts as a container for other controls.
            </summary>
            <remarks>
            When AddCallBacks is <strong>true</strong> (the default), this control will
            attempt to coerce every child control into using callbacks instead of postbacks.
            The is a great way to quickly convert a section of an existing page, or the
            entire page, into a simple Ajax page. Unfortunately, if there are several
            child controls in the panel, updates can be slow and the page may appear to
            blink. It is usually a much better idea to convert specific controls into
            their Anthem equivalent and use UpdateAfterCallBack judiciously.
            </remarks>
        </member>
        <member name="M:Anthem.Panel.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.Panel.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.Panel.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.Panel.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.Panel.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.Panel.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.Panel.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.Panel.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.Panel.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.Panel.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.Panel.AddCallBacks">
            <summary>
            Gets or sets a value indicating whether the control should convert child control postbacks into callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the control should convert child control postbacks to
            callbacks; otherwise, <strong>false</strong>. The default is
            <strong>true</strong>.
            </value>
            <remarks>
            Only controls that <see cref="T:Anthem.Manager"/> recognizes will be converted.
            </remarks>
        </member>
        <member name="P:Anthem.Panel.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.Panel.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Panel.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.Panel.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Panel.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.LinkButton">
            <summary>
            Creates an updatable hyperlink-style button control on a Web page that responds to mouse clicks using callbacks.
            </summary>
        </member>
        <member name="M:Anthem.LinkButton.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the <strong>onclick</strong> attribute to invoke a callback from the client, then renders
            the attributes of the control to the output stream.
            </summary>
        </member>
        <member name="M:Anthem.LinkButton.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.LinkButton.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.LinkButton.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.LinkButton.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.LinkButton.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.LinkButton.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.LinkButton.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.LinkButton.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.LinkButton.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.LinkButton.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.LinkButton.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.LinkButton.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.LinkButton.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.LinkButton.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.LinkButton.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.FileUpload">
            <summary>
            Creates an updatable text box control and a browse button that allow users to select a file to upload to the server.
            </summary>
        </member>
        <member name="M:Anthem.FileUpload.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.FileUpload.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.FileUpload.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.FileUpload.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.FileUpload.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.FileUpload.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.FileUpload.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.FileUpload.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.ValidationSummary">
            <summary>
            Creates an updatable control that displays a summary of all validation errors inline on a Web page, in a message box, or both.
            </summary>
        </member>
        <member name="M:Anthem.ValidationSummary.OnPreRender(System.EventArgs)">
            <summary>
            If ShowMessageBox=true, use Anthem.Manager to display the validation
            summary in a javascript alert.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Anthem.ValidationSummary.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.ValidationSummary.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.ValidationSummary.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.ValidationSummary.EnableCallBackScript">
            <summary>
            Gets or sets a value which indicates whether the control should display the validation summary as a client-side alert.
            </summary>
            <value><strong>true</strong> if the control should display the validation summary on the client after a callback; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</value>
        </member>
        <member name="P:Anthem.ValidationSummary.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.ValidationSummary.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.ValidationSummary.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.ValidationSummary.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.ValidationSummary.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.RegularExpressionValidator">
            <summary>
            Creates an updatable control that validates whether the value of an associated input control matches the pattern specified by a regular expression.
            </summary>
        </member>
        <member name="M:Anthem.RegularExpressionValidator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.RegularExpressionValidator.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.RegularExpressionValidator.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.RegularExpressionValidator.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.RegularExpressionValidator.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.RegularExpressionValidator.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.RegularExpressionValidator.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.RegularExpressionValidator.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.PlaceHolder">
            <summary>
            Creates an updatable container for dynamically added server controls on the Web page. 
            </summary>
        </member>
        <member name="M:Anthem.PlaceHolder.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.PlaceHolder.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.PlaceHolder.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.PlaceHolder.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.PlaceHolder.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.PlaceHolder.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.PlaceHolder.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.PlaceHolder.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.PlaceHolder.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.PlaceHolder.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.PlaceHolder.AddCallBacks">
            <summary>
            Gets or sets a value indicating whether the control should convert child control postbacks into callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the control should convert child control postbacks to
            callbacks; otherwise, <strong>false</strong>. The default is
            <strong>true</strong>.
            </value>
            <remarks>
            Only controls that <see cref="T:Anthem.Manager"/> recognizes will be converted.
            </remarks>
        </member>
        <member name="P:Anthem.PlaceHolder.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.PlaceHolder.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.PlaceHolder.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.PlaceHolder.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.PlaceHolder.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.MethodAttribute">
            <summary>
            Applying this attribute to your public methods makes it possible
            to invoke them from JavaScript in your client pages.
            </summary>
        </member>
        <member name="T:Anthem.FormView">
            <summary>
            Creates an updatable control that displays the values of a single record from a data source using user-defined templates. The FormView control allows you to edit, delete, and insert records using callbacks.
            </summary>
        </member>
        <member name="M:Anthem.FormView.OnDataPropertyChanged">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.DataBoundControl.OnDataPropertyChanged"/>, 
            then sets <see cref="P:Anthem.FormView.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.FormView.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.FormView.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.FormView.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.FormView.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.FormView.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.FormView.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.FormView.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.FormView.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.FormView.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.FormView.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.FormView.AddCallBacks">
            <summary>
            Gets or sets a value indicating whether the control should convert child control postbacks into callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the control should convert child control postbacks to
            callbacks; otherwise, <strong>false</strong>. The default is
            <strong>true</strong>.
            </value>
            <remarks>
            Only controls that <see cref="T:Anthem.Manager"/> recognizes will be converted.
            </remarks>
        </member>
        <member name="P:Anthem.FormView.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.FormView.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.FormView.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.FormView.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.FormView.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.CompareValidator">
            <summary>
            Creates an updatable control that compares the value entered by the user in an input control with the value entered in another input control, or with a constant value.
            </summary>
        </member>
        <member name="M:Anthem.CompareValidator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.CompareValidator.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.CompareValidator.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.CompareValidator.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.CompareValidator.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.CompareValidator.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.CompareValidator.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.CompareValidator.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.Button">
            <summary>
            Displays an updatable push button control on the web page that uses callbacks.
            </summary>
        </member>
        <member name="M:Anthem.Button.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the <strong>onclick</strong> attribute to invoke a callback from the client, then renders
            the attributes of the control to the output stream.
            </summary>
        </member>
        <member name="M:Anthem.Button.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.Button.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.Button.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.Button.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.Button.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.Button.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.Button.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.Button.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.Button.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.Button.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.Button.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.Button.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Button.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.Button.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Button.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.RequiredFieldValidator">
            <summary>
            Creates an updatable control that makes the associated input control a required field.
            </summary>
        </member>
        <member name="M:Anthem.RequiredFieldValidator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.RequiredFieldValidator.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.RequiredFieldValidator.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.RequiredFieldValidator.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.RequiredFieldValidator.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.RequiredFieldValidator.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.RequiredFieldValidator.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.RequiredFieldValidator.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.DataGrid">
            <summary>
            Creates an updatable data bound list control that displays the items from data source in a table. The <strong>DataGrid</strong> control allows you to select, sort, and edit these items using callbacks.
            </summary>
        </member>
        <member name="M:Anthem.DataGrid.OnCancelCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.DataGrid.OnCancelCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)"/>, 
            then sets <see cref="P:Anthem.DataGrid.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DataGrid.OnDeleteCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.DataGrid.OnDeleteCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)"/>, 
            then sets <see cref="P:Anthem.DataGrid.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DataGrid.OnEditCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.DataGrid.OnEditCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)"/>, 
            then sets <see cref="P:Anthem.DataGrid.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DataGrid.OnItemCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.DataGrid.OnItemCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)"/>, 
            then sets <see cref="P:Anthem.DataGrid.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DataGrid.OnPageIndexChanged(System.Web.UI.WebControls.DataGridPageChangedEventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.DataGrid.OnPageIndexChanged(System.Web.UI.WebControls.DataGridPageChangedEventArgs)"/>, 
            then sets <see cref="P:Anthem.DataGrid.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DataGrid.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.BaseDataList.OnSelectedIndexChanged(System.EventArgs)"/>, 
            then sets <see cref="P:Anthem.DataGrid.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DataGrid.OnSortCommand(System.Web.UI.WebControls.DataGridSortCommandEventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.DataGrid.OnSortCommand(System.Web.UI.WebControls.DataGridSortCommandEventArgs)"/>, 
            then sets <see cref="P:Anthem.DataGrid.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DataGrid.OnUpdateCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)">
            <summary>
            Excecutes <see cref="M:System.Web.UI.WebControls.DataGrid.OnUpdateCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)"/>, 
            then sets <see cref="P:Anthem.DataGrid.UpdateAfterCallBack"/> to true.
            </summary>
        </member>
        <member name="M:Anthem.DataGrid.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.DataGrid.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.DataGrid.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.DataGrid.CallBackCancelledFunction">
            <summary>
            Gets or sets the javascript function to execute on the client if the callback is
            cancelled. See <see cref="P:Anthem.DataGrid.PreCallBackFunction"/>.
            </summary>
        </member>
        <member name="P:Anthem.DataGrid.EnableCallBack">
            <summary>
            Gets or sets a value indicating whether the control uses callbacks instead of postbacks to post data to the server.
            </summary>
            <value>
            	<strong>true</strong> if the the control uses callbacks; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="P:Anthem.DataGrid.EnabledDuringCallBack">
            <summary>
            Gets or sets a value indicating whether the control is enabled on the client during callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the the control is enabled; otherwise,
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
            <remarks>Not all HTML elements support this property.</remarks>
        </member>
        <member name="P:Anthem.DataGrid.PostCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client after the callback
            response is received.
            </summary>
            <remarks>
            The callback response is passed into the PostCallBackFunction as the one and only
            parameter.
            </remarks>
            <example>
            	<code lang="JScript" description="This example shows a PostCallBackFunction that displays the error if there is one.">
            function AfterCallBack(result) {
              if (result.error != null &amp;&amp; result.error.length &gt; 0) {
                alert(result.error);
              }
            }
                </code>
            </example>
        </member>
        <member name="P:Anthem.DataGrid.PreCallBackFunction">
            <summary>
            Gets or sets the javascript function to execute on the client before the callback
            is made.
            </summary>
            <remarks>The function should return false on the client to cancel the callback.</remarks>
        </member>
        <member name="P:Anthem.DataGrid.TextDuringCallBack">
            <summary>Gets or sets the text to display on the client during the callback.</summary>
            <remarks>
            If the HTML element that invoked the callback has a text value (such as &lt;input
            type="button" value="Run"&gt;) then the text of the element is updated during the
            callback, otherwise the associated &lt;label&gt; text is updated during the callback.
            If the element does not have a text value, and if there is no associated &lt;label&gt;,
            then this property is ignored.
            </remarks>
        </member>
        <member name="P:Anthem.DataGrid.AddCallBacks">
            <summary>
            Gets or sets a value indicating whether the control should convert child control postbacks into callbacks.
            </summary>
            <value>
            	<strong>true</strong> if the control should convert child control postbacks to
            callbacks; otherwise, <strong>false</strong>. The default is
            <strong>true</strong>.
            </value>
            <remarks>
            Only controls that <see cref="T:Anthem.Manager"/> recognizes will be converted.
            </remarks>
        </member>
        <member name="P:Anthem.DataGrid.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.DataGrid.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.DataGrid.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.DataGrid.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.DataGrid.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.Label">
            <summary>
            Creates an updatable label control, which displays text on a Web page.
            </summary>
        </member>
        <member name="M:Anthem.Label.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.Label.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.Label.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.Label.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.Label.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Label.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.Label.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.Label.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
        <member name="T:Anthem.HyperLink">
            <summary>
            Creates an updatable control that displays a link to another Web page. 
            </summary>
        </member>
        <member name="M:Anthem.HyperLink.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the server control wrapped in an additional element so that the
            element.innerHTML can be updated after a callback.
            </summary>
        </member>
        <member name="M:Anthem.HyperLink.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event and registers the control
            with <see cref="T:Anthem.Manager"/>.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:Anthem.HyperLink.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Forces the server control to output content and trace information.
            </summary>
        </member>
        <member name="P:Anthem.HyperLink.AutoUpdateAfterCallBack">
            <summary>
            Gets or sets a value indicating whether the control should be updated after each callback.
            Also see <see cref="P:Anthem.HyperLink.UpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used declaratively as shown here.">
            &lt;anthem:Label id="label" runat="server" AutoUpdateAfterCallBack="true" /&gt;
                </code>
            </example>
        </member>
        <member name="P:Anthem.HyperLink.UpdateAfterCallBack">
            <summary>
            Gets or sets a value which indicates whether the control should be updated after the current callback.
            Also see <see cref="P:Anthem.HyperLink.AutoUpdateAfterCallBack"/>.
            </summary>
            <value>
            	<strong>true</strong> if the the control should be updated; otherwise,
            <strong>false</strong>. The default is <strong>false</strong>.
            </value>
            <example>
            	<code lang="CS" description="This is normally used in server code as shown here.">
            this.Label = "Count = " + count;
            this.Label.UpdateAfterCallBack = true;
                </code>
            </example>
        </member>
        <member name="P:Anthem.HyperLink.Visible">
            <summary>
            Overrides the Visible property so that Anthem.Manager can track the visibility.
            </summary>
            <value>
            	<strong>true</strong> if the control is rendered on the client; otherwise
            <strong>false</strong>. The default is <strong>true</strong>.
            </value>
        </member>
    </members>
</doc>
